name: Psalm and WPCS Checks

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  schedule:
    - cron: '28 13 * * 0'

permissions:
  contents: write
  issues: write

jobs:
  php-security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run WPCS check
        id: wpcs_check
        uses: 10up/wpcs-action@stable
        with:
          enable_warnings: true
          paths: '.'
          excludes: 'vendor src build'
          standard: 'WordPress'
          phpcs_bin_path: 'phpcs'
          use_local_config: false
          only_changed_files: false
          extra_args: '--report-json=./phpcs.json'
        continue-on-error: true

      - name: Generate WPCS Markdown Report
        if: always()
        run: |
          npm i -g github:10up/phpcs-json-to-md
          phpcs-json-to-md --path ./phpcs.json --output ./phpcs.md

      - name: Psalm Security Scan
        id: psalm
        uses: psalm/psalm-github-security-scan@f3e6fd9432bc3e44aec078572677ce9d2ef9c287
        continue-on-error: true

      - name: Prettify SARIF Output
        if: always()
        run: |
          if [ -f results.sarif ]; then
            jq '.' results.sarif > pretty_results.sarif
          fi

      - name: Manage GitHub Issue
        id: manage_issue
        if: always()
        run: |
          # Define variables
          branch_name="${{ github.ref_name }}"
          event_name="${{ github.event_name }}"
          actor="${{ github.actor }}"
          pr_title=""
          pr_url=""
          pr_number=""
          
          if [ "$event_name" == "pull_request" ]; then
            pr_title="${{ github.event.pull_request.title }}"
            pr_url="${{ github.event.pull_request.html_url }}"
            pr_number="${{ github.event.pull_request.number }}"
          fi

          # Check for existing issues
          existing_issue=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues" | \
            jq -r ".[] | select(.title | contains(\"Code Quality Issues Found in $branch_name\")) | .number")

          # Close existing issue if there are no errors
          if [[ "$existing_issue" && "${{ steps.wpcs_check.outcome }}" == "success" ]]; then
            curl -X PATCH \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -d '{"state": "closed"}' \
              "https://api.github.com/repos/${{ github.repository }}/issues/$existing_issue"
            exit 0
          fi

          # Construct issue body
          body="### Code Quality Issues Detected for $branch_name
          #### WPCS Issues:
          $(cat phpcs.md)"

          if [ -f pretty_results.sarif ]; then
            psalm_issues=$(cat pretty_results.sarif)
            body+=$(cat <<EOF
          #### Psalm Issues:
          \`\`\`json
          ${psalm_issues}
          \`\`\`
          EOF
            )
          fi

          # Create or update issue
          if [ "$existing_issue" ]; then
            curl -X PATCH \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -d "$(jq -n --arg body "$body" '{body: $body}')" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$existing_issue"
          else
            issue_title="Code Quality Issues Found in $branch_name"
            new_issue=$(curl -s -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -d "$(jq -n --arg title "$issue_title" --arg body "$body" --argjson labels '["bug", "code-quality"]' '{title: $title, body: $body, labels: $labels}')" \
              "https://api.github.com/repos/${{ github.repository }}/issues")
            new_issue_number=$(echo "$new_issue" | jq -r '.number')

            # Assign issue to the author
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -d "$(jq -n --arg assignee "$actor" '{assignees: [$assignee]}')" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$new_issue_number/assignees"
          fi

          # Mention the issue in the PR
          if [ "$pr_number" ]; then
            comment_body="Linked Issue: $issue_url"
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -d "$(jq -n --arg body "$comment_body" '{body: $body}')" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$pr_number/comments"
          fi
