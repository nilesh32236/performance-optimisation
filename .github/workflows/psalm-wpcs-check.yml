name: Psalm and WPCS Checks

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  schedule:
    - cron: '28 13 * * 0'

permissions:
  contents: read
  issues: write  # Required for creating issues

jobs:
  php-security:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
      issues: write  # Allow creating issues

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Run WPCS check using 10up action
      - name: Run WPCS check using 10up action
        id: wpcs_check
        uses: 10up/wpcs-action@stable
        with:
          enable_warnings: true  # Enable warnings
          paths: '.'  # Path to check, use '.' for the entire repository
          excludes: 'vendor src'  # Exclude these directories
          standard: 'WordPress'  # The WordPress standard you want to use
          phpcs_bin_path: 'phpcs'  # Path to the PHPCS binary
          use_local_config: false  # If you want to use a local PHPCS config file
          only_changed_files: false  # Set to 'true' to check only changed files in the PR
          only_changed_lines: false  # Set to 'true' to check only changed lines
          repo_branch: master  # Branch of standard repository
        continue-on-error: true  # Continue even if this step fails

      # Step 3: Save WPCS check output to wpcs_report.txt
      - name: Save WPCS check output to wpcs_report.txt
        if: steps.wpcs_check.outcome == 'failure'  # Only run this if the WPCS check fails
        run: |
          echo "WPCS issues found. Saving output to wpcs_report.txt."
          echo "${{ steps.wpcs_check.outputs.stdout }}" > wpcs_report.txt
          cat wpcs_report.txt  # Print the output for visibility

      # Step 4: Psalm Security Scan
      - name: Psalm Security Scan
        id: psalm
        uses: psalm/psalm-github-security-scan@f3e6fd9432bc3e44aec078572677ce9d2ef9c287
        continue-on-error: true  # Continue the workflow even if Psalm fails

      # Step 5: Upload Security Analysis results to GitHub
      - name: Upload Security Analysis results to GitHub
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

      # Step 6: Create GitHub issue on WPCS errors
      - name: Create GitHub Issue on Errors
        if: steps.wpcs_check.outcome == 'failure'  # Only run this if the WPCS check fails
        run: |
          # Initialize the issue body
          body="### WPCS errors detected in the codebase.\n\n"

          # Add WPCS errors to the issue body if they exist
          if [ -f wpcs_report.txt ]; then
            body+="#### WPCS Issues:\n\`\`\`\n$(cat wpcs_report.txt)\n\`\`\`\n"
          fi

          # Add Psalm errors to the issue body if they exist
          if [ -f results.sarif ]; then
            body+="#### Psalm Issues:\n\`\`\`\n$(cat results.sarif)\n\`\`\`\n"
          fi

          # Include the WPCS Check Outcome
          body+="#### WPCS Check Outcome: ${{ steps.wpcs_check.outcome }}"

          # Create a GitHub issue via GitHub API
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -d "$(jq -n --arg title 'Code Quality Issues Found' --arg body "$body" --argjson labels '["bug", "wpcs", "security"]' '{title: $title, body: $body, labels: $labels}')" \
            https://api.github.com/repos/${{ github.repository }}/issues
