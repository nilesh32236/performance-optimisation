name: Psalm and WPCS Checks

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  schedule:
    - cron: '28 13 * * 0'

permissions:
  contents: write
  pull-requests: write

jobs:
  php-security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run WPCS check
        id: wpcs_check
        uses: 10up/wpcs-action@stable
        with:
          enable_warnings: true
          paths: '.'
          excludes: 'index.asset.php'
          standard: 'WordPress'
          phpcs_bin_path: 'phpcs'
          use_local_config: false
          only_changed_files: false
          extra_args: '--report-json=./phpcs.json'
        continue-on-error: true

      - name: Validate and Parse WPCS JSON
        if: always()
        run: |
          # Debugging: Print the contents of phpcs.json
          echo "Contents of phpcs.json:"
          cat ./phpcs.json

          if [ -s ./phpcs.json ] && jq empty ./phpcs.json; then
            echo "Valid JSON. Proceeding..."
          else
            echo "Invalid or empty JSON. Skipping WPCS comment generation."
            exit 0
          fi

      - name: Fetch Pull Request Diff
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files" > pr_diff.json

      - name: Add Review Comments for Issues
        if: always()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Parse WPCS JSON and add review comments
          if [ -s ./phpcs.json ]; then
              wpcs_issues=$(jq -c '.files[] | select(.messages != null) | {file: .file, messages: .messages}' ./phpcs.json)

              echo "$wpcs_issues" | while read -r issue; do
                  file=$(echo "$issue" | jq -r '.file | sub("^.*/repo-root/"; "")')
                  messages=$(echo "$issue" | jq -c '.messages[]')

                  echo "$messages" | while read -r message; do
                      line=$(echo "$message" | jq -r '.line // empty')
                      message_text=$(echo "$message" | jq -r '.message')
                      severity=$(echo "$message" | jq -r '.type')

                      if [ -n "$line" ]; then
                          curl -s -X POST \
                            -H "Authorization: token $GITHUB_TOKEN" \
                            -H "Accept: application/vnd.github.v3+json" \
                            -d "$(jq -n --arg path "$file" --arg body "$severity: $message_text" --argjson position "$line" --arg commit_id "${{ github.sha }}" \
                                '{body: $body, path: $path, line: $position, commit_id: $commit_id, side: "RIGHT"}')" \
                            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/comments"
                      else
                          echo "Could not find position for file: $file"
                      fi
                  done
              done
          else
              echo "phpcs.json is empty or not generated."
              exit 1
          fi
