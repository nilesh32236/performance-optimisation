name: Psalm and WPCS Checks

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  schedule:
    - cron: '28 13 * * 0'

permissions:
  contents: write
  pull-requests: write

jobs:
  php-security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run WPCS check
        id: wpcs_check
        uses: 10up/wpcs-action@stable
        with:
          enable_warnings: true
          paths: '.'
          excludes: 'index.asset.php'
          standard: 'WordPress'
          phpcs_bin_path: 'phpcs'
          use_local_config: false
          only_changed_files: false
          extra_args: '--report-json=./phpcs.json'
        continue-on-error: true

      - name: Get PR Head SHA
        if: github.event_name == 'pull_request'
        id: pr_head
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_DATA=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}")
          HEAD_SHA=$(echo "$PR_DATA" | jq -r '.head.sha')
          echo "head_sha=$HEAD_SHA" >> $GITHUB_OUTPUT

      - name: Add Review Comments for Issues
        if: always() && github.event_name == 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_HEAD_SHA: ${{ steps.pr_head.outputs.head_sha }}
        run: |
          if [ ! -f ./phpcs.json ] || [ ! -s ./phpcs.json ]; then
            echo "phpcs.json is missing or empty"
            exit 0
          fi

          # Process files with messages
          echo "Processing PHPCS results..."
          
          jq -r 'to_entries | .[] | select(.key == "files") | .value | to_entries[] | select(.value.messages | length > 0) | @base64' ./phpcs.json | while read -r file_entry; do
            if [ -n "$file_entry" ]; then
              decoded=$(echo "$file_entry" | base64 --decode)
              
              # Extract file path and clean it
              file=$(echo "$decoded" | jq -r '.key | sub("^/github/workspace/"; "")')
              
              # Process messages for the file
              echo "$decoded" | jq -c '.value.messages[]?' | while read -r message; do
                if [ -n "$message" ] && [ "$message" != "null" ]; then
                  # Extract message details
                  line=$(echo "$message" | jq -r '.line // empty')
                  message_text=$(echo "$message" | jq -r '.message // empty')
                  severity=$(echo "$message" | jq -r '.type // empty')

                  if [ -n "$line" ] && [ -n "$message_text" ]; then
                    echo "Adding comment for $file:$line - $severity: $message_text"
                    
                    response=$(curl -s -w "\n%{http_code}" -X POST \
                      -H "Authorization: token $GITHUB_TOKEN" \
                      -H "Accept: application/vnd.github.v3+json" \
                      -d "$(jq -n --arg path "$file" \
                                  --arg body "$severity: $message_text" \
                                  --argjson line "$line" \
                                  --arg commit_id "$PR_HEAD_SHA" \
                                  '{
                                    body: $body,
                                    path: $path,
                                    line: $line,
                                    commit_id: $commit_id,
                                    side: "RIGHT"
                                  }')" \
                      "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/comments")
                    
                    # Split response into body and status code
                    http_code=$(echo "$response" | tail -n1)
                    response_body=$(echo "$response" | head -n -1)
                    
                    if [ "$http_code" != "201" ]; then
                      echo "Error creating comment. Status code: $http_code"
                      echo "Response: $response_body"
                      # Continue processing other comments even if one fails
                      continue
                    fi
                  else
                    echo "Skipping invalid message for $file (missing line or message)"
                  fi
                fi
              done
            fi
          done