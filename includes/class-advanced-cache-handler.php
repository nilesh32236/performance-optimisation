<?php
/**
 * Advanced_Cache_Handler class for the PerformanceOptimise plugin.
 *
 * Handles the creation and removal of an advanced-cache.php file used for serving cached content.
 *
 * @package PerformanceOptimise\Inc
 * @since 1.0.0
 */

namespace PerformanceOptimise\Inc;

// Exit if accessed directly.
if ( ! defined( 'ABSPATH' ) ) {
	exit;
}

if ( ! class_exists( 'PerformanceOptimise\Inc\Advanced_Cache_Handler' ) ) {
	/**
	 * Class Advanced_Cache_Handler
	 *
	 * Manages the creation and removal of the advanced-cache.php file.
	 *
	 * @since 1.0.0
	 */
	class Advanced_Cache_Handler {

		/**
		 * Path to the advanced-cache.php file.
		 *
		 * @since 1.0.0
		 * @var string
		 */
		private static string $handler_file_path = '';

		/**
		 * Initializes paths.
		 *
		 * @since 1.0.0
		 */
		private static function init_paths(): void {
			if ( empty( self::$handler_file_path ) ) {
				self::$handler_file_path = wp_normalize_path( WP_CONTENT_DIR . '/advanced-cache.php' );
			}
		}

		/**
		 * Creates the advanced-cache.php file.
		 *
		 * Generates the file to serve cached content, including gzip versions, and ensures required directories exist.
		 *
		 * @since 1.0.0
		 * @return void
		 */
		public static function create(): void {
			self::init_paths();
			$wp_filesystem = Util::init_filesystem();

			if ( ! $wp_filesystem ) {
				if ( defined( 'WP_DEBUG' ) && WP_DEBUG ) {
					// phpcs:ignore WordPress.PHP.DevelopmentFunctions.error_log_error_log
					error_log( 'WPPO: Filesystem could not be initialized for creating advanced-cache.php.' );
				}
				return;
			}

			// Ensure WP_CONTENT_DIR is writable before attempting to create the file.
			if ( ! $wp_filesystem->is_writable( wp_normalize_path( WP_CONTENT_DIR ) ) ) {
				if ( defined( 'WP_DEBUG' ) && WP_DEBUG ) {
					// phpcs:ignore WordPress.PHP.DevelopmentFunctions.error_log_error_log
					error_log( 'WPPO: WP_CONTENT_DIR is not writable. Cannot create advanced-cache.php.' );
				}
				return;
			}

			// Content of the advanced-cache.php file.
			// Using HEREDOC for readability.
			$handler_code = <<<'PHP'
<?php
/**
 * Performance Optimise - Advanced Cache Handler
 *
 * This file is dynamically generated by the Performance Optimisation plugin.
 * Do not modify this file directly, as your changes will be overwritten.
 */

// Exit if accessed directly.
if ( ! defined( 'ABSPATH' ) && ! defined( 'WP_CONTENT_DIR' ) ) {
	// If ABSPATH is not defined, we're likely outside WordPress context.
	// Try to define WP_CONTENT_DIR based on this file's location if not already set.
	if ( ! defined( 'WP_CONTENT_DIR' ) ) {
		define( 'WP_CONTENT_DIR', rtrim( dirname( __FILE__ ), '/\\' ) );
	}
	// Attempt to define ABSPATH, assuming standard directory structure.
	// This is a guess and might not always be correct if WP is in a subdirectory.
	if ( file_exists( WP_CONTENT_DIR . '/../wp-load.php' ) ) {
		define( 'ABSPATH', dirname( WP_CONTENT_DIR . '/../wp-load.php' ) . '/' );
	} else {
		// Cannot determine WordPress path, exit.
		exit;
	}
} elseif ( defined( 'ABSPATH' ) && ! defined( 'WP_CONTENT_DIR' ) ) {
	// If ABSPATH is defined, but WP_CONTENT_DIR is not (unusual case).
	define( 'WP_CONTENT_DIR', ABSPATH . 'wp-content' );
}


// Basic security check: ensure this file is not accessed directly
// and that we are in a GET request and not in an admin context.
if ( php_sapi_name() === 'cli' || $_SERVER['REQUEST_METHOD'] !== 'GET' || ( defined('WP_ADMIN') && WP_ADMIN ) ) {
	return;
}

// Do not serve cached pages for logged-in users or during AJAX requests or for POST requests.
// Also, check for common WordPress cookies indicating a logged-in user or specific states.
if ( ! empty( $_COOKIE ) ) {
	foreach ( $_COOKIE as $key => $value ) {
		if ( preg_match( '/^(wordpress_logged_in_|wp-postpass_|woocommerce_items_in_cart|woocommerce_cart_hash|comment_author_|wf_loginalerted)/', $key ) ) {
			return;
		}
	}
}

// Do not serve cache if there are query strings, unless specific common tracking parameters.
// This is a simple check; more complex rules might be needed for specific query strings.
if ( ! empty( $_SERVER['QUERY_STRING'] ) ) {
    // Allow common tracking parameters like utm_*, fbclid, gclid etc.
    // If other query strings are present, don't serve cache.
    $allowed_query_params = array('utm_source', 'utm_medium', 'utm_campaign', 'utm_term', 'utm_content', 'fbclid', 'gclid', '_ga');
    $query_vars = array();
    parse_str($_SERVER['QUERY_STRING'], $query_vars);
    foreach ($query_vars as $key => $value) {
        if (!in_array(strtolower($key), $allowed_query_params)) {
            return; // Disallowed query parameter found
        }
    }
}


$wppo_site_host = isset( $_SERVER['HTTP_HOST'] ) ? preg_replace( '/[^a-zA-Z0-9.-_]/', '', $_SERVER['HTTP_HOST'] ) : '';
$wppo_request_uri = isset( $_SERVER['REQUEST_URI'] ) ? strtok( $_SERVER['REQUEST_URI'], '?' ) : ''; // Remove query string.

if ( empty( $wppo_site_host ) || empty( $wppo_request_uri ) ) {
	return;
}

// Normalize request URI: ensure trailing slash, unless it's a file.
if ( substr( $wppo_request_uri, -1 ) !== '/' && strpos(basename($wppo_request_uri), '.') === false ) {
	$wppo_request_uri .= '/';
}
// Replace multiple slashes with a single slash.
$wppo_request_uri = preg_replace( '#/+#', '/', $wppo_request_uri );

// Define the cache path structure.
// Using WP_CONTENT_DIR which should be defined by now.
$wppo_cache_base_dir = WP_CONTENT_DIR . '/cache/wppo/';
$wppo_file_path_base = $wppo_cache_base_dir . $wppo_site_host . $wppo_request_uri . 'index.html';
$wppo_file_path_base = str_replace( '//', '/', $wppo_file_path_base ); // Normalize path.

$wppo_file_path      = $wppo_file_path_base;
$wppo_gzip_file_path = $wppo_file_path_base . '.gz';

$wppo_serve_file = null;
$wppo_is_gzipped = false;

// Check for Gzip version first if browser accepts gzip.
if ( isset( $_SERVER['HTTP_ACCEPT_ENCODING'] ) && strpos( $_SERVER['HTTP_ACCEPT_ENCODING'], 'gzip' ) !== false && file_exists( $wppo_gzip_file_path ) ) {
	$wppo_serve_file = $wppo_gzip_file_path;
	$wppo_is_gzipped = true;
} elseif ( file_exists( $wppo_file_path ) ) {
	$wppo_serve_file = $wppo_file_path;
}

if ( $wppo_serve_file ) {
	$wppo_file_mtime = filemtime( $wppo_serve_file );
	$wppo_etag       = md5( $wppo_serve_file . $wppo_file_mtime ); // ETag based on file path and mtime.

	// Check If-Modified-Since and If-None-Match headers.
	if ( ( isset( $_SERVER['HTTP_IF_MODIFIED_SINCE'] ) && strtotime( $_SERVER['HTTP_IF_MODIFIED_SINCE'] ) >= $wppo_file_mtime ) ||
		 ( isset( $_SERVER['HTTP_IF_NONE_MATCH'] ) && trim( $_SERVER['HTTP_IF_NONE_MATCH'], '"' ) === $wppo_etag ) ) {
		header( $_SERVER['SERVER_PROTOCOL'] . ' 304 Not Modified', true, 304 );
		header( 'Connection: close' );
		exit;
	}

	// Set caching headers.
	header( 'Cache-Control: public, max-age=0' ); // Client should revalidate.
	header( 'Last-Modified: ' . gmdate( 'D, d M Y H:i:s', $wppo_file_mtime ) . ' GMT' );
	header( 'ETag: "' . $wppo_etag . '"' );
	header( 'Content-Type: text/html; charset=UTF-8' );

	if ( $wppo_is_gzipped ) {
		header( 'Content-Encoding: gzip' );
		header( 'Content-Length: ' . filesize( $wppo_serve_file ) );
	} else {
	    // For non-gzipped, Content-Length should be set if known.
	    // If output buffering is used by readfile, it might handle this.
	    // Explicitly setting it can be beneficial.
	    header( 'Content-Length: ' . filesize( $wppo_serve_file ) );
	}

	// Vary header for content negotiation.
	header( 'Vary: Accept-Encoding' );
	
	// Prevent PHP from adding its own caching headers.
	session_cache_limiter('');

	// Read and output the file.
	// Using readfile() is generally efficient for this.
	// Ensure output buffering is off or flushed before readfile.
	while (ob_get_level() > 0) {
        ob_end_clean();
    }
	
	@readfile( $wppo_serve_file ); // The @ suppresses errors if readfile fails, though checks are made.
	exit;
}

// If no cached file is served, WordPress will continue its normal execution.
return;
PHP;
			$wp_filesystem->put_contents( self::$handler_file_path, $handler_code, FS_CHMOD_FILE );
		}


		/**
		 * Removes the advanced-cache.php file.
		 *
		 * Deletes the advanced-cache.php file if it exists.
		 *
		 * @since 1.0.0
		 * @return void
		 */
		public static function remove(): void {
			self::init_paths();
			$wp_filesystem = Util::init_filesystem();

			if ( $wp_filesystem && $wp_filesystem->exists( self::$handler_file_path ) ) {
				if ( ! $wp_filesystem->delete( self::$handler_file_path ) ) {
					if ( defined( 'WP_DEBUG' ) && WP_DEBUG ) {
						// phpcs:ignore WordPress.PHP.DevelopmentFunctions.error_log_error_log
						error_log( 'WPPO: Failed to delete advanced-cache.php at ' . self::$handler_file_path );
					}
				}
			}
		}
	}
}
